import org.scalatest.matchers.should.Matchers.*
import ex1.*
import ex1.Parsers.*

class ParserTest extends org.scalatest.funsuite.AnyFunSuite:

  test("Basic parser test"):
    def parser = new BasicParser(Set('a', 'b', 'c'))
    parser.parseAll("aabc".toList) should be (true)
    parser.parseAll("aabcdc".toList) should be (false)
    parser.parseAll("".toList) should be (true)

  test("Non-empty parser test"):
    def parser = new NonEmptyParser(Set('0', '1'))
    parser.parseAll("0101".toList) should be (true)
    parser.parseAll("0123".toList) should be (false)
    parser.parseAll(List()) should be (false)

  test("Non-consecutive elements parser test"):
    def parser = new NotTwoConsecutiveParser(Set('X', 'Y', 'Z'))
    parser.parseAll("XYZ".toList) should be (true)
    parser.parseAll("XYYZ".toList) should be (false)
    parser.parseAll("".toList) should be (true)

  test("Test non-consecutive and non-empty parsers combined"):
    def parser = new BasicParser(Set('X', 'Y', 'Z')) with NotTwoConsecutive[Char] with NonEmpty[Char]
    parser.parseAll("XYZ".toList) should be (true)
    parser.parseAll("XYYZ".toList) should be (false)
    parser.parseAll("".toList) should be (false)

  test("Test parser generated by string with extension method"):
    def parser: Parser[Char] = "abc".charParser()
    parser.parseAll("aabc".toList) should be (true)
    parser.parseAll("aabcdc".toList) should be (false)
    parser.parseAll("".toList) should be (true)

  test("Shortener than parser test"):
    def parser: Parser[Char] = new BasicParser(Set('a', 'b', 'c')) with ShortenThenN[Char](3)
    parser.parseAll("abc".toList) should be (true)
    parser.parseAll("abbc".toList) should be (false)